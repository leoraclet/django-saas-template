/*! tailwindcss v4.1.11 | MIT License | https://tailwindcss.com */
@layer properties {
  @supports (((-webkit-hyphens: none)) and (not (margin-trim: inline))) or
    ((-moz-orient: inline) and (not (color: rgb(from red r g b)))) {
    *,
    :before,
    :after,
    ::backdrop {
      --tw-font-weight: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
    }
  }
}
@layer theme {
  :root,
  :host {
    --font-sans:
      ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji',
      'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
    --font-mono:
      ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
      'Courier New', monospace;
    --spacing: 0.25rem;
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --font-weight-bold: 700;
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *,
  :after,
  :before,
  ::backdrop {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }
  ::file-selector-button {
    box-sizing: border-box;
    border: 0 solid;
    margin: 0;
    padding: 0;
  }
  html,
  :host {
    -webkit-text-size-adjust: 100%;
    -moz-tab-size: 4;
    tab-size: 4;
    line-height: 1.5;
    font-family: var(
      --default-font-family,
      ui-sans-serif,
      system-ui,
      sans-serif,
      'Apple Color Emoji',
      'Segoe UI Emoji',
      'Segoe UI Symbol',
      'Noto Color Emoji'
    );
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b,
  strong {
    font-weight: bolder;
  }
  code,
  kbd,
  samp,
  pre {
    font-family: var(
      --default-mono-font-family,
      ui-monospace,
      SFMono-Regular,
      Menlo,
      Monaco,
      Consolas,
      'Liberation Mono',
      'Courier New',
      monospace
    );
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(
      --default-mono-font-variation-settings,
      normal
    );
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub,
  sup {
    vertical-align: baseline;
    font-size: 75%;
    line-height: 0;
    position: relative;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol,
  ul,
  menu {
    list-style: none;
  }
  img,
  svg,
  video,
  canvas,
  audio,
  iframe,
  embed,
  object {
    vertical-align: middle;
    display: block;
  }
  img,
  video {
    max-width: 100%;
    height: auto;
  }
  button,
  input,
  select,
  optgroup,
  textarea {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }
  ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    opacity: 1;
    background-color: #0000;
    border-radius: 0;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not ((-webkit-appearance: -apple-pay-button))) or
    (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentColor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      ::placeholder {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit {
    padding-block: 0;
  }
  ::-webkit-datetime-edit-year-field {
    padding-block: 0;
  }
  ::-webkit-datetime-edit-month-field {
    padding-block: 0;
  }
  ::-webkit-datetime-edit-day-field {
    padding-block: 0;
  }
  ::-webkit-datetime-edit-hour-field {
    padding-block: 0;
  }
  ::-webkit-datetime-edit-minute-field {
    padding-block: 0;
  }
  ::-webkit-datetime-edit-second-field {
    padding-block: 0;
  }
  ::-webkit-datetime-edit-millisecond-field {
    padding-block: 0;
  }
  ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button,
  input:where([type='button'], [type='reset'], [type='submit']) {
    -webkit-appearance: button;
    -moz-appearance: button;
    appearance: button;
  }
  ::file-selector-button {
    -webkit-appearance: button;
    -moz-appearance: button;
    appearance: button;
  }
  ::-webkit-inner-spin-button {
    height: auto;
  }
  ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden='until-found'])) {
    display: none !important;
  }
  :where(:root),
  :root:has(input.theme-controller[value='pastel']:checked),
  [data-theme='pastel'] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98.462% 0.001 247.838);
    --color-base-300: oklch(92.462% 0.001 247.838);
    --color-base-content: oklch(20% 0 0);
    --color-primary: oklch(90% 0.063 306.703);
    --color-primary-content: oklch(49% 0.265 301.924);
    --color-secondary: oklch(89% 0.058 10.001);
    --color-secondary-content: oklch(51% 0.222 16.935);
    --color-accent: oklch(90% 0.093 164.15);
    --color-accent-content: oklch(50% 0.118 165.612);
    --color-neutral: oklch(55% 0.046 257.417);
    --color-neutral-content: oklch(92% 0.013 255.508);
    --color-info: oklch(86% 0.127 207.078);
    --color-info-content: oklch(52% 0.105 223.128);
    --color-success: oklch(87% 0.15 154.449);
    --color-success-content: oklch(52% 0.154 150.069);
    --color-warning: oklch(83% 0.128 66.29);
    --color-warning-content: oklch(55% 0.195 38.402);
    --color-error: oklch(80% 0.114 19.571);
    --color-error-content: oklch(50% 0.213 27.518);
    --radius-selector: 1rem;
    --radius-field: 2rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 2px;
    --depth: 0;
    --noise: 0;
  }
  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
  :root:has(input.theme-controller[value='pastel']:checked),
  [data-theme='pastel'] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98.462% 0.001 247.838);
    --color-base-300: oklch(92.462% 0.001 247.838);
    --color-base-content: oklch(20% 0 0);
    --color-primary: oklch(90% 0.063 306.703);
    --color-primary-content: oklch(49% 0.265 301.924);
    --color-secondary: oklch(89% 0.058 10.001);
    --color-secondary-content: oklch(51% 0.222 16.935);
    --color-accent: oklch(90% 0.093 164.15);
    --color-accent-content: oklch(50% 0.118 165.612);
    --color-neutral: oklch(55% 0.046 257.417);
    --color-neutral-content: oklch(92% 0.013 255.508);
    --color-info: oklch(86% 0.127 207.078);
    --color-info-content: oklch(52% 0.105 223.128);
    --color-success: oklch(87% 0.15 154.449);
    --color-success-content: oklch(52% 0.154 150.069);
    --color-warning: oklch(83% 0.128 66.29);
    --color-warning-content: oklch(55% 0.195 38.402);
    --color-error: oklch(80% 0.114 19.571);
    --color-error-content: oklch(50% 0.213 27.518);
    --radius-selector: 1rem;
    --radius-field: 2rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 2px;
    --depth: 0;
    --noise: 0;
  }
  :root:has(input.theme-controller[value='dark']:checked),
  [data-theme='dark'] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
  :root:has(input.theme-controller[value='cupcake']:checked),
  [data-theme='cupcake'] {
    color-scheme: light;
    --color-base-100: oklch(97.788% 0.004 56.375);
    --color-base-200: oklch(93.982% 0.007 61.449);
    --color-base-300: oklch(91.586% 0.006 53.44);
    --color-base-content: oklch(23.574% 0.066 313.189);
    --color-primary: oklch(85% 0.138 181.071);
    --color-primary-content: oklch(43% 0.078 188.216);
    --color-secondary: oklch(89% 0.061 343.231);
    --color-secondary-content: oklch(45% 0.187 3.815);
    --color-accent: oklch(90% 0.076 70.697);
    --color-accent-content: oklch(47% 0.157 37.304);
    --color-neutral: oklch(27% 0.006 286.033);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(68% 0.169 237.323);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(69% 0.17 162.48);
    --color-success-content: oklch(26% 0.051 172.552);
    --color-warning: oklch(79% 0.184 86.047);
    --color-warning-content: oklch(28% 0.066 53.813);
    --color-error: oklch(64% 0.246 16.439);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 1rem;
    --radius-field: 2rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 2px;
    --depth: 1;
    --noise: 0;
  }
  @property --radialprogress {
    syntax: '<percentage>';
    inherits: true;
    initial-value: 0%;
  }
  :root {
    scrollbar-color: currentColor #0000;
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
  :root:has(
    .modal-open,
    .modal[open],
    .modal:target,
    .modal-toggle:checked,
    .drawer:not([class*='drawer-open']) > .drawer-toggle:checked
  ) {
    overflow: hidden;
  }
  :where(
    :root:has(
      .modal-open,
      .modal[open],
      .modal:target,
      .modal-toggle:checked,
      .drawer:not(.drawer-open) > .drawer-toggle:checked
    )
  ) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(
      var(--color-base-100),
      var(--color-base-100)
    );
    --root-bg: var(--color-base-100);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :where(
      :root:has(
        .modal-open,
        .modal[open],
        .modal:target,
        .modal-toggle:checked,
        .drawer:not(.drawer-open) > .drawer-toggle:checked
      )
    ) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }
  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(
    .modal-start,
    .modal-end
  ) {
    scrollbar-gutter: stable;
  }
  :root,
  [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer components;
@layer utilities {
  .menu {
    --menu-active-fg: var(--color-neutral-content);
    --menu-active-bg: var(--color-neutral);
    flex-flow: column wrap;
    width: fit-content;
    padding: 0.5rem;
    font-size: 0.875rem;
    display: flex;
  }
  .menu :where(li ul) {
    white-space: nowrap;
    margin-inline-start: 1rem;
    padding-inline-start: 0.5rem;
    position: relative;
  }
  .menu :where(li ul):before {
    background-color: var(--color-base-content);
    opacity: 0.1;
    width: var(--border);
    content: '';
    inset-inline-start: 0;
    position: absolute;
    top: 0.75rem;
    bottom: 0.75rem;
  }
  .menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
    display: none;
  }
  .menu :where(li:not(.menu-title) > :not(ul, details, .menu-title, .btn)),
  .menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
    border-radius: var(--radius-field);
    text-align: start;
    text-wrap: balance;
    -webkit-user-select: none;
    user-select: none;
    grid-auto-columns: minmax(auto, max-content) auto max-content;
    grid-auto-flow: column;
    align-content: flex-start;
    align-items: center;
    gap: 0.5rem;
    padding-block: 0.375rem;
    padding-inline: 0.75rem;
    transition-property: color, background-color, box-shadow;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    display: grid;
  }
  .menu :where(li > details > summary) {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where(li > details > summary) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }
  .menu :where(li > details > summary)::-webkit-details-marker {
    display: none;
  }
  :is(
    .menu :where(li > details > summary),
    .menu :where(li > .menu-dropdown-toggle)
  ):after {
    content: '';
    transform-origin: 50%;
    pointer-events: none;
    justify-self: flex-end;
    width: 0.375rem;
    height: 0.375rem;
    transition-property: rotate, translate;
    transition-duration: 0.2s;
    display: block;
    translate: 0 -1px;
    rotate: -135deg;
    box-shadow: inset 2px 2px;
  }
  .menu :where(li > details[open] > summary):after,
  .menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
    translate: 0 1px;
    rotate: 45deg;
  }
  .menu
    :where(
      li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
      li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
    ):not(.menu-active, :active, .btn).menu-focus,
  .menu
    :where(
      li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
      li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
    ):not(.menu-active, :active, .btn):focus-visible {
    cursor: pointer;
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu
      :where(
        li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
        li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
      ):not(.menu-active, :active, .btn).menu-focus,
    .menu
      :where(
        li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
        li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
      ):not(.menu-active, :active, .btn):focus-visible {
      background-color: color-mix(
        in oklab,
        var(--color-base-content) 10%,
        transparent
      );
    }
  }
  .menu
    :where(
      li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
      li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
    ):not(.menu-active, :active, .btn).menu-focus,
  .menu
    :where(
      li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
      li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
    ):not(.menu-active, :active, .btn):focus-visible {
    color: var(--color-base-content);
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu
      :where(
        li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
        li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
      ):not(.menu-active, :active, .btn).menu-focus,
    .menu
      :where(
        li:not(.menu-title, .disabled) > :not(ul, details, .menu-title),
        li:not(.menu-title, .disabled) > details > summary:not(.menu-title)
      ):not(.menu-active, :active, .btn):focus-visible {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }
  .menu
    :where(
      li:not(.menu-title, .disabled)
        > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover,
      li:not(.menu-title, .disabled)
        > details
        > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
    ) {
    cursor: pointer;
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu
      :where(
        li:not(.menu-title, .disabled)
          > :not(ul, details, .menu-title):not(
            .menu-active,
            :active,
            .btn
          ):hover,
        li:not(.menu-title, .disabled)
          > details
          > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
      ) {
      background-color: color-mix(
        in oklab,
        var(--color-base-content) 10%,
        transparent
      );
    }
  }
  .menu
    :where(
      li:not(.menu-title, .disabled)
        > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover,
      li:not(.menu-title, .disabled)
        > details
        > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
    ) {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu
      :where(
        li:not(.menu-title, .disabled)
          > :not(ul, details, .menu-title):not(
            .menu-active,
            :active,
            .btn
          ):hover,
        li:not(.menu-title, .disabled)
          > details
          > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
      ) {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }
  .menu
    :where(
      li:not(.menu-title, .disabled)
        > :not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover,
      li:not(.menu-title, .disabled)
        > details
        > summary:not(.menu-title):not(.menu-active, :active, .btn):hover
    ) {
    box-shadow:
      inset 0 1px #00000003,
      inset 0 -1px #ffffff03;
  }
  .menu :where(li:empty) {
    background-color: var(--color-base-content);
    opacity: 0.1;
    height: 1px;
    margin: 0.5rem 1rem;
  }
  .menu :where(li) {
    flex-flow: column wrap;
    flex-shrink: 0;
    align-items: stretch;
    display: flex;
    position: relative;
  }
  .menu :where(li) .badge {
    justify-self: flex-end;
  }
  .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
  .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
  .menu :where(li) > details > summary:active {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
    .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
    .menu :where(li) > details > summary:active {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }
  .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
  .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
  .menu :where(li) > details > summary:active {
    color: var(--menu-active-fg);
    background-color: var(--menu-active-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  :is(
    .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
    .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
    .menu :where(li) > details > summary:active
  ):not(
    :is(
      .menu :where(li) > :not(ul, .menu-title, details, .btn):active,
      .menu :where(li) > :not(ul, .menu-title, details, .btn).menu-active,
      .menu :where(li) > details > summary:active
    ):active
  ) {
    box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
  }
  .menu :where(li).menu-disabled {
    pointer-events: none;
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu :where(li).menu-disabled {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .menu .dropdown:focus-within .menu-dropdown-toggle:after {
    translate: 0 1px;
    rotate: 45deg;
  }
  .menu .dropdown-content {
    margin-top: 0.5rem;
    padding: 0.5rem;
  }
  .menu .dropdown-content:before {
    display: none;
  }
  .dropdown {
    position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
    display: inline-block;
    position: relative;
  }
  .dropdown > :not(summary):focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .dropdown > :not(summary):focus {
      outline-offset: 2px;
      outline: 2px solid #0000;
    }
  }
  .dropdown .dropdown-content {
    position: absolute;
  }
  .dropdown:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within)
    .dropdown-content {
    transform-origin: top;
    opacity: 0;
    display: none;
    scale: 95%;
  }
  .dropdown[popover],
  .dropdown .dropdown-content {
    z-index: 999;
    transition-behavior: allow-discrete;
    transition-property: opacity, scale, display;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    animation: 0.2s dropdown;
  }
  @starting-style {
    .dropdown[popover],
    .dropdown .dropdown-content {
      opacity: 0;
      scale: 95%;
    }
  }
  :is(
      .dropdown.dropdown-open,
      .dropdown:not(.dropdown-hover):focus,
      .dropdown:focus-within
    )
    > [tabindex]:first-child {
    pointer-events: none;
  }
  :is(
      .dropdown.dropdown-open,
      .dropdown:not(.dropdown-hover):focus,
      .dropdown:focus-within
    )
    .dropdown-content {
    opacity: 1;
  }
  .dropdown.dropdown-hover:hover .dropdown-content {
    opacity: 1;
    scale: 100%;
  }
  .dropdown:is(details) summary::-webkit-details-marker {
    display: none;
  }
  :is(.dropdown.dropdown-open, .dropdown:focus, .dropdown:focus-within)
    .dropdown-content {
    scale: 100%;
  }
  .dropdown:where([popover]) {
    background: 0 0;
  }
  .dropdown[popover] {
    color: inherit;
    position: fixed;
  }
  @supports not (position-area: bottom) {
    .dropdown[popover] {
      margin: auto;
    }
    .dropdown[popover].dropdown-open:not(:popover-open) {
      transform-origin: top;
      opacity: 0;
      display: none;
      scale: 95%;
    }
    .dropdown[popover]::backdrop {
      background-color: oklab(0% none none/.3);
    }
  }
  .dropdown[popover]:not(.dropdown-open, :popover-open) {
    transform-origin: top;
    opacity: 0;
    display: none;
    scale: 95%;
  }
  :where(.btn) {
    width: unset;
  }
  .btn {
    cursor: pointer;
    text-align: center;
    vertical-align: middle;
    outline-offset: 2px;
    webkit-user-select: none;
    -webkit-user-select: none;
    user-select: none;
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    --tw-prose-links: var(--btn-fg);
    height: var(--size);
    font-size: var(--fontsize, 0.875rem);
    outline-color: var(--btn-color, var(--color-base-content));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border-width: var(--border);
    border-style: solid;
    border-color: var(--btn-border);
    text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
    touch-action: manipulation;
    box-shadow:
      0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset,
      var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 10);
    --btn-bg: var(--btn-color, var(--color-base-200));
    --btn-fg: var(--color-base-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    flex-wrap: nowrap;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    gap: 0.375rem;
    font-weight: 600;
    transition-property: color, background-color, border-color, box-shadow;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    display: inline-flex;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-border: color-mix(
        in oklab,
        var(--btn-bg),
        #000 calc(var(--depth) * 5%)
      );
    }
  }
  .btn {
    --btn-shadow: 0 3px 2px -2px var(--btn-bg), 0 4px 3px -2px var(--btn-bg);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn {
      --btn-shadow:
        0 3px 2px -2px
          color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
        0 4px 3px -2px
          color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
    }
  }
  .btn {
    --btn-noise: var(--fx-noise);
  }
  .prose .btn {
    text-decoration-line: none;
  }
  @media (hover: hover) {
    .btn:hover {
      --btn-bg: var(--btn-color, var(--color-base-200));
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:hover {
        --btn-bg: color-mix(
          in oklab,
          var(--btn-color, var(--color-base-200)),
          #000 7%
        );
      }
    }
  }
  .btn:focus-visible {
    isolation: isolate;
    outline-width: 2px;
    outline-style: solid;
  }
  .btn:active:not(.btn-active) {
    --btn-bg: var(--btn-color, var(--color-base-200));
    translate: 0 0.5px;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:active:not(.btn-active) {
      --btn-bg: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-200)),
        #000 5%
      );
    }
  }
  .btn:active:not(.btn-active) {
    --btn-border: var(--btn-color, var(--color-base-200));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:active:not(.btn-active) {
      --btn-border: color-mix(
        in oklab,
        var(--btn-color, var(--color-base-200)),
        #000 7%
      );
    }
  }
  .btn:active:not(.btn-active) {
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
  }
  .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
      background-color: color-mix(
        in oklab,
        var(--color-base-content) 10%,
        transparent
      );
    }
  }
  .btn:is(:disabled, [disabled], .btn-disabled):not(.btn-link, .btn-ghost) {
    box-shadow: none;
  }
  .btn:is(:disabled, [disabled], .btn-disabled) {
    pointer-events: none;
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .btn:is(:disabled, [disabled], .btn-disabled) {
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
  }
  @media (hover: hover) {
    .btn:is(:disabled, [disabled], .btn-disabled):hover {
      pointer-events: none;
      background-color: var(--color-neutral);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:is(:disabled, [disabled], .btn-disabled):hover {
        background-color: color-mix(
          in oklab,
          var(--color-neutral) 20%,
          transparent
        );
      }
    }
    .btn:is(:disabled, [disabled], .btn-disabled):hover {
      --btn-border: #0000;
      --btn-fg: var(--color-base-content);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .btn:is(:disabled, [disabled], .btn-disabled):hover {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
    }
  }
  .btn:is(input[type='checkbox'], input[type='radio']) {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }
  .btn:is(input[type='checkbox'], input[type='radio']):after {
    content: attr(aria-label);
  }
  .btn:where(input:checked:not(.filter .btn)) {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
    isolation: isolate;
  }
  .indicator {
    width: max-content;
    display: inline-flex;
    position: relative;
  }
  .indicator :where(.indicator-item) {
    z-index: 1;
    white-space: nowrap;
    top: var(--indicator-t, 0);
    bottom: var(--indicator-b, auto);
    left: var(--indicator-s, auto);
    right: var(--indicator-e, 0);
    translate: var(--indicator-x, 50%) var(--indicator-y, -50%);
    position: absolute;
  }
  .table {
    border-radius: var(--radius-box);
    text-align: left;
    width: 100%;
    font-size: 0.875rem;
    position: relative;
  }
  .table:where(:dir(rtl), [dir='rtl'], [dir='rtl'] *) {
    text-align: right;
  }
  @media (hover: hover) {
    :is(.table tr.row-hover, .table tr.row-hover:nth-child(2n)):hover {
      background-color: var(--color-base-200);
    }
  }
  .table :where(th, td) {
    vertical-align: middle;
    padding-block: 0.75rem;
    padding-inline: 1rem;
  }
  .table :where(thead, tfoot) {
    white-space: nowrap;
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead, tfoot) {
      color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .table :where(thead, tfoot) {
    font-size: 0.875rem;
    font-weight: 600;
  }
  .table :where(tfoot) {
    border-top: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tfoot) {
      border-top: var(--border) solid
        color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }
  .table :where(.table-pin-rows thead tr) {
    z-index: 1;
    background-color: var(--color-base-100);
    position: sticky;
    top: 0;
  }
  .table :where(.table-pin-rows tfoot tr) {
    z-index: 1;
    background-color: var(--color-base-100);
    position: sticky;
    bottom: 0;
  }
  .table :where(.table-pin-cols tr th) {
    background-color: var(--color-base-100);
    position: sticky;
    left: 0;
    right: 0;
  }
  .table :where(thead tr, tbody tr:not(:last-child)) {
    border-bottom: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead tr, tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid
        color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }
  .avatar {
    vertical-align: middle;
    display: inline-flex;
    position: relative;
  }
  .avatar > div {
    aspect-ratio: 1;
    display: block;
    overflow: hidden;
  }
  .avatar img {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
  .checkbox {
    border: var(--border) solid var(--input-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox {
      border: var(--border) solid
        var(
          --input-color,
          color-mix(in oklab, var(--color-base-content) 20%, #0000)
        );
    }
  }
  .checkbox {
    cursor: pointer;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow:
      0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 0 #0000 inset,
      0 0 #0000;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    flex-shrink: 0;
    padding: 0.25rem;
    transition:
      background-color 0.2s,
      box-shadow 0.2s;
    display: inline-block;
    position: relative;
  }
  .checkbox:before {
    --tw-content: '';
    content: var(--tw-content);
    opacity: 0;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    width: 100%;
    height: 100%;
    box-shadow: 0 3px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    background-color: currentColor;
    font-size: 1rem;
    line-height: 0.75;
    transition:
      clip-path 0.3s 0.1s,
      opacity 0.1s 0.1s,
      rotate 0.3s 0.1s,
      translate 0.3s 0.1s;
    display: block;
    rotate: 45deg;
  }
  .checkbox:focus-visible {
    outline: 2px solid var(--input-color, currentColor);
    outline-offset: 2px;
  }
  .checkbox:checked,
  .checkbox[aria-checked='true'] {
    background-color: var(--input-color, #0000);
    box-shadow:
      0 0 #0000 inset,
      0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset,
      0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  :is(.checkbox:checked, .checkbox[aria-checked='true']):before {
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
    opacity: 1;
  }
  @media (forced-colors: active) {
    :is(.checkbox:checked, .checkbox[aria-checked='true']):before {
      --tw-content: '✔︎';
      clip-path: none;
      background-color: #0000;
      rotate: none;
    }
  }
  @media print {
    :is(.checkbox:checked, .checkbox[aria-checked='true']):before {
      --tw-content: '✔︎';
      clip-path: none;
      background-color: #0000;
      rotate: none;
    }
  }
  .checkbox:indeterminate:before {
    opacity: 1;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
    translate: 0 -35%;
    rotate: none;
  }
  .checkbox:disabled {
    cursor: not-allowed;
    opacity: 0.2;
  }
  .z-1 {
    z-index: 1;
  }
  .mt-3 {
    margin-top: calc(var(--spacing) * 3);
  }
  .badge {
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--badge-fg);
    border: var(--border) solid var(--badge-color, var(--color-base-200));
    width: fit-content;
    padding-inline: calc(0.25rem * 3 - var(--border));
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--badge-bg);
    --badge-bg: var(--badge-color, var(--color-base-100));
    --badge-fg: var(--color-base-content);
    --size: calc(var(--size-selector, 0.25rem) * 6);
    height: var(--size);
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    display: inline-flex;
  }
  .navbar {
    align-items: center;
    width: 100%;
    min-height: 4rem;
    padding: 0.5rem;
    display: flex;
  }
  .navbar-end {
    justify-content: flex-end;
    align-items: center;
    width: 50%;
    display: inline-flex;
  }
  .navbar-start {
    justify-content: flex-start;
    align-items: center;
    width: 50%;
    display: inline-flex;
  }
  .navbar-center {
    flex-shrink: 0;
    align-items: center;
    display: inline-flex;
  }
  .mask {
    vertical-align: middle;
    display: inline-block;
    -webkit-mask-position: 50%;
    mask-position: 50%;
    -webkit-mask-size: contain;
    mask-size: contain;
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
  }
  .flex {
    display: flex;
  }
  .table {
    display: table;
  }
  .btn-circle {
    width: var(--size);
    height: var(--size);
    border-radius: 3.40282e38px;
    padding-inline: 0;
  }
  .h-5 {
    height: calc(var(--spacing) * 5);
  }
  .h-12 {
    height: calc(var(--spacing) * 12);
  }
  .w-5 {
    width: calc(var(--spacing) * 5);
  }
  .w-12 {
    width: calc(var(--spacing) * 12);
  }
  .w-52 {
    width: calc(var(--spacing) * 52);
  }
  .items-center {
    align-items: center;
  }
  .gap-3 {
    gap: calc(var(--spacing) * 3);
  }
  .overflow-x-auto {
    overflow-x: auto;
  }
  .menu-sm :where(li:not(.menu-title) > :not(ul, details, .menu-title)),
  .menu-sm :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
    border-radius: var(--radius-field);
    padding-block: 0.25rem;
    padding-inline: 0.625rem;
    font-size: 0.75rem;
  }
  .menu-sm .menu-title {
    padding-block: 0.5rem;
    padding-inline: 0.75rem;
  }
  .btn {
    border-radius: 3.40282e38px;
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .badge-ghost {
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    background-image: none;
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-200 {
    background-color: var(--color-base-200);
  }
  .mask-squircle {
    -webkit-mask-image: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e");
    mask-image: url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e");
  }
  .p-2 {
    padding: calc(var(--spacing) * 2);
  }
  .badge-sm {
    --size: calc(var(--size-selector, 0.25rem) * 5);
    padding-inline: calc(0.25rem * 2.5 - var(--border));
    font-size: 0.75rem;
  }
  .badge-xs {
    --size: calc(var(--size-selector, 0.25rem) * 4);
    padding-inline: calc(0.25rem * 2 - var(--border));
    font-size: 0.625rem;
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .opacity-50 {
    opacity: 0.5;
  }
  .shadow,
  .shadow-sm {
    --tw-shadow:
      0 1px 3px 0 var(--tw-shadow-color, #0000001a),
      0 1px 2px -1px var(--tw-shadow-color, #0000001a);
    box-shadow:
      var(--tw-inset-shadow), var(--tw-inset-ring-shadow),
      var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible) {
    --btn-shadow: '';
    --btn-bg: #0000;
    --btn-border: #0000;
    --btn-noise: none;
  }
  .btn-ghost:not(.btn-active, :hover, :active:focus, :focus-visible):not(
      :disabled,
      [disabled],
      .btn-disabled
    ) {
    --btn-fg: currentColor;
    outline-color: currentColor;
  }
  @media (hover: none) {
    .btn-ghost:hover:not(
        .btn-active,
        :active,
        :focus-visible,
        :disabled,
        [disabled],
        .btn-disabled
      ) {
      --btn-shadow: '';
      --btn-bg: #0000;
      --btn-border: #0000;
      --btn-noise: none;
      --btn-fg: currentColor;
    }
  }
  .btn-xs {
    --fontsize: 0.6875rem;
    --btn-p: 0.5rem;
    --size: calc(var(--size-field, 0.25rem) * 6);
  }
  .badge-info {
    --badge-color: var(--color-info);
    --badge-fg: var(--color-info-content);
  }
  .badge-primary {
    --badge-color: var(--color-primary);
    --badge-fg: var(--color-primary-content);
  }
  .badge-warning {
    --badge-color: var(--color-warning);
    --badge-fg: var(--color-warning-content);
  }
  .btn-accent {
    --btn-color: var(--color-accent);
    --btn-fg: var(--color-accent-content);
  }
  .btn-error {
    --btn-color: var(--color-error);
    --btn-fg: var(--color-error-content);
  }
  .btn-info {
    --btn-color: var(--color-info);
    --btn-fg: var(--color-info-content);
  }
  .btn-neutral {
    --btn-color: var(--color-neutral);
    --btn-fg: var(--color-neutral-content);
  }
  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }
  .btn-secondary {
    --btn-color: var(--color-secondary);
    --btn-fg: var(--color-secondary-content);
  }
  .btn-success {
    --btn-color: var(--color-success);
    --btn-fg: var(--color-success-content);
  }
  .btn-warning {
    --btn-color: var(--color-warning);
    --btn-fg: var(--color-warning-content);
  }
  @media (min-width: 64rem) {
    .lg\:menu-horizontal {
      flex-direction: row;
      display: inline-flex;
    }
    .lg\:menu-horizontal > li:not(.menu-title) > details > ul {
      margin-inline-start: 0;
      margin-top: 1rem;
      padding-block: 0.5rem;
      padding-inline-end: 0.5rem;
      position: absolute;
    }
    .lg\:menu-horizontal > li > details > ul:before {
      content: none;
    }
    :where(.lg\:menu-horizontal > li:not(.menu-title) > details > ul) {
      border-radius: var(--radius-box);
      background-color: var(--color-base-100);
      box-shadow:
        0 1px 3px #0000001a,
        0 1px 2px -1px #0000001a;
    }
  }
}
body {
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
  margin: 0;
  display: flex;
}
#app {
  text-align: center;
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  to {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@keyframes toast {
  0% {
    opacity: 0;
    scale: 0.9;
  }
  to {
    opacity: 1;
    scale: 1;
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes rating {
  0%,
  40% {
    filter: brightness(1.05) contrast(1.05);
    scale: 1.1;
  }
}
@property --tw-font-weight {
  syntax: '*';
  inherits: false;
}
@property --tw-shadow {
  syntax: '*';
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: '*';
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: '<percentage>';
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: '*';
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: '*';
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: '<percentage>';
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: '*';
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: '*';
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: '*';
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: '*';
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: '*';
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: '<length>';
  inherits: false;
  initial-value: 0;
}
@property --tw-ring-offset-color {
  syntax: '*';
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: '*';
  inherits: false;
  initial-value: 0 0 #0000;
}
